datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Company {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String     @unique
  pensionCode        String
  adminName          String
  adminEmail         String     @unique
  password           String
  country            String
  city               String
  industry           String
  onBoardingFinished Boolean?   @default(true)
  employees          Employee[]
  contractors        Contractor[]
  consents           Contract[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid()) @map("_id")
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  sessions              Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  secondName        String
  email             String  @unique
  phoneNumber       String  @unique
  address           String
  employeeID        String  @unique
  nationalID        String  @unique
  startDate         String
  department        String
  jobTitle          String
  currency          String
  monthlyGross      String
  bankName          String?
  bankAccountNumber String?  @unique
  swiftCode         String?
  Domicile          String?
  walletAddress     String?  @unique
  companyId         String  @db.ObjectId
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}


model Contractor {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  secondName        String
  email             String  @unique
  phoneNumber       String  @unique
  address           String
  employeeID        String  @unique
  nationalID        String  @unique
  startDate         String
  department        String
  jobTitle          String
  currency          String
  monthlyGross      String
  bankName          String?
  bankAccountNumber String?  @unique
  swiftCode         String?
  Domicile          String?
  walletAddress     String?  @unique
  companyId         String  @db.ObjectId
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts       Contract[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
 
}


model Contract {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  startDate         DateTime
  endDate           DateTime
  contractorId      String @db.ObjectId
  companyId         String @db.ObjectId
  contractor        Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}