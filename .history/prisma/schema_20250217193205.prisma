datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PredefinedTax {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  rate         Float
  name         String       @unique
  min          Float
  max          Float?
  companyId    String       @db.ObjectId
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appliedTaxes AppliedTax[]
}

model AppliedTax {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String?       @db.ObjectId
  employee     Employee?     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  contractorId String?       @db.ObjectId
  contractor   Contractor?   @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  taxId        String        @db.ObjectId
  tax          PredefinedTax @relation(fields: [taxId], references: [id], onDelete: Cascade)
  taxPaid      TaxPaid[]
  Payroll      Payroll?      @relation(fields: [payrollId], references: [id])
  payrollId    String?       @db.ObjectId
}

model Company {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String          @unique
  pensionCode        String
  adminName          String
  adminEmail         String          @unique
  password           String
  country            String
  city               String
  industry           String
  onBoardingFinished Boolean?        @default(true)
  employees          Employee[]
  contractors        Contractor[]
  contractTerms      ContractTerms[]
  Benefits           Benefit[]
  predefinedTaxes    PredefinedTax[]
  payrolls            MainPayroll[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid()) @map("_id")
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  sessions              Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  secondName        String
  email             String                  @unique
  phoneNumber       String                  @unique
  address           String
  employeeID        String                  @unique
  nationalID        String                  @unique
  startDate         DateTime
  department        String
  jobTitle          String
  currency          Currency
  paymentMethod     PaymentMethod           @default(phone)
  paymentPhone      String?
  monthlyGross      Float
  bankName          String?
  bankAccountNumber String?                 @unique
  swiftCode         String?
  Domicile          String?
  walletAddress     String?
  companyId         String                  @db.ObjectId
  company           Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  benefits          EmployeeBenefit[]
  salaries          EmployeeSalaryPayment[]
  taxes             TaxPaid[]
  appliedTaxes      AppliedTax[]
  additionalIncomes AdditionalIncome[]
  deductions        Deduction[]
  payrolls          Payroll[]
}

model Contractor {
  id                String                    @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  secondName        String
  email             String                    @unique
  phoneNumber       String                    @unique
  address           String
  contractorID      String                    @unique
  nationalID        String                    @unique
  department        String
  jobTitle          String
  currency          Currency
  paymentMethod     PaymentMethod             @default(phone)
  paymentPhone      String?
  bankName          String?
  bankAccountNumber String?                   @unique
  swiftCode         String?
  Domicile          String?
  walletAddress     String?                   @unique
  companyId         String                    @db.ObjectId
  company           Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contractsTerms    ContractTerms[]
  benefits          ContractorBenefit[]
  salaries          ContractorSalaryPayment[]
  appliedTaxes      AppliedTax[]
  payrolls          Payroll[]
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
}

model ContractTerms {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  companyId    String     @db.ObjectId
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contractorId String     @db.ObjectId
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  salary       Float
  startDate    DateTime
  endDate      DateTime
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Benefit {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      BenefitName
  details   String?
  companyId String      @db.ObjectId
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model EmployeeBenefit {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String   @db.ObjectId
  benefit    String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payrollId  String?  @db.ObjectId
  payroll    Payroll? @relation(fields: [payrollId], references: [id])
}

model ContractorBenefit {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  contractorId String     @db.ObjectId
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  benefit      String
}

model EmployeeSalaryPayment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String   @db.ObjectId
  grossSalary  Float
  netSalary    Float
  salaryPeriod DateTime
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model ContractorSalaryPayment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String     @db.ObjectId
  grossSalary  Float
  netSalary    Float
  salaryPeriod DateTime
  contractor   Contractor @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model TaxPaid {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  taxId       String     @db.ObjectId
  tax         AppliedTax @relation(fields: [taxId], references: [id])
  amount      Float
  employeeId  String     @db.ObjectId
  employee    Employee   @relation(fields: [employeeId], references: [id])
  paymentDate DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  payrollId   String?    @db.ObjectId
}

model MainPayroll {
  id                          String             @id @default(auto()) @map("_id") @db.ObjectId
  paymentDate                 DateTime?
  status                      PaymentStatus      @default(Pending)
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  payrolls                    Payroll[]
   companyId         String?                  @db.ObjectId
  company           Company?                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Payroll {
  id                          String             @id @default(auto()) @map("_id") @db.ObjectId
  status                      PaymentStatus      @default(Pending)
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  taxes                       AppliedTax[]
  benefits                    EmployeeBenefit[]
  additionalIncomes           AdditionalIncome[]
  deductions                  Deduction[]
  employeeId                  String?            @db.ObjectId
  employee                    Employee?          @relation(fields: [employeeId], references: [id])
  contractorId                String?            @db.ObjectId
  contractor                  Contractor?        @relation(fields: [contractorId], references: [id])
  salary                      Float
  netSalary                   Float
  mainPayollId                String?            @db.ObjectId
  mainPayroll                 MainPayroll?        @relation(fields: [mainPayollId], references: [id])
   
}

model AdditionalIncome {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  employee_id    String        @db.ObjectId
  amount         Float
  description    String?
  income_type    IncomeType
  payment_status PaymentStatus @default(Pending)
  payment_date   DateTime?
  currency       String        @default("USD")
  payroll_id     String?       @db.ObjectId
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  employee       Employee      @relation(fields: [employee_id], references: [id])
  payroll        Payroll?      @relation(fields: [payroll_id], references: [id])
}

model Deduction {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  employee_id String        @db.ObjectId
  amount      Float
  reason      String
  status      PaymentStatus @default(Pending)
  employee    Employee      @relation(fields: [employee_id], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  payrollId   String?       @db.ObjectId
  payroll     Payroll?      @relation(fields: [payrollId], references: [id])
}

enum PayrollStatus {
  DRAFT
  PENDING
  PROCESSING
  PAID
}

enum IncomeType {
  Bonus
  Commission
  Overtime
  Allowance
  Reimbursement
  Adjustment
}

enum PaymentStatus {
  Pending
  Paid
  Cancelled
  Failed
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  AUD
  CAD
  CHF
  CNY
  HKD
  NZD
  SEK
  KRW
  SGD
  NOK
  MXN
  INR
  RUB
  ZAR
  BRL
  AED
}

enum TaxType {
  PAYE
  SocialSecurity
  Insurance
  Other
}

enum BenefitName {
  WORKING_HOURS_AND_TIME_OFF
  SKILLS_DEVELOPMENT
  FOOD_AND_BEVERAGE
  GIFTS_AND_ACTIVITIES
  HEALTH_CARE
  WELLNESS
  RETIREMENT_AND_PENSION_PLANS
  INSURANCES
  FINANCIAL_GROWTH_BENEFITS
  PERSONAL_FINANCE_BENEFITS
  MOBILITY_AND_OFFICE_SETUP
  WORKLIFE_BALANCE
}

enum PaymentMethod {
  bank
  crypto
  phone
}
